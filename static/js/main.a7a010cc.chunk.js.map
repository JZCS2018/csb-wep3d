{"version":3,"sources":["App.js","index.js"],"names":["colorPalette","VaccineMap","props","useState","colorScale","setColorScale","data","setData","regions","setRegions","metric","useEffect","fetch","then","res","json","x","cs","scaleQuantile","domain","_","map","filter","d","k","regionCode","length","range","scaleMap","each","Container","style","marginTop","minWidth","Grid","Column","projection","geography","geographies","geo","default","stroke","strokeWidth","outline","pressed","onMouseEnter","properties","fill","rsmKey","id","backgroundColor","Row","Table","celled","Header","HeaderCell","Body","Cell","Label","ribbon","Loader","active","inline","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yOA6BMA,EAAe,CACnB,UACA,UACA,UACA,UACA,UACA,WAGa,SAASC,EAAWC,GACjC,MAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGMC,EAAS,kBAiCf,OA/BAC,qBAAU,WACRC,MAAM,qBACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJT,EAAQS,GACR,IAAMC,EAAKC,cACRC,OACCC,IAAEC,IACAD,IAAEE,OACAF,IAAEC,IAAIL,GAAG,SAACO,EAAGC,GAEX,OADAD,EAAEE,WAAaD,EACRD,MAET,SAACA,GAAD,OAAOA,EAAEb,GAAU,GAAKa,EAAEE,WAAWC,OAAS,MAEhD,SAACH,GAAD,OAAOA,EAAEb,OAGZiB,MAAM3B,GAEL4B,EAAW,GACfR,IAAES,KAAKb,GAAG,SAACO,GACLA,EAAEb,IAAW,IACfkB,EAASL,EAAC,YAAkBN,EAAGM,EAAEb,QAIrCL,EAAcuB,QAGjB,IACCtB,EAEA,gCACA,cAACwB,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAW,MAAOC,SAAU,UAA/C,SACA,cAACC,EAAA,EAAD,UACA,cAACA,EAAA,EAAKC,OAAN,UACA,cAAC,gBAAD,CAAgBC,WAAW,eAA3B,SACE,cAAC,cAAD,CAAa,WAAW,MAAM,WAAS,MAAMC,UAzDnD,qGAyDM,SACG,qBAAGC,YAA+BjB,KAAI,SAAAkB,GAAG,OACxC,cAAC,YAAD,CAEIF,UAAWE,EACXR,MAAO,CACLS,QAAS,CACLC,OAAQ,UACRC,YAAa,IACbC,QAAS,QAEbC,QAAS,CACLD,QAAS,SAEjBE,aAAc,WACZpC,EAAW8B,EAAIO,WAAWrB,aAKtBsB,KACCvC,IAAY+B,EAAIO,WAAWrB,WA/D1B,UAiEErB,EAAWmC,EAAIO,WAAWrB,aApB7Bc,EAAIS,sBA+BnB,cAAC,IAAD,CAAcC,GAAG,MAAKC,gBAAgB,QAAtC,SAA8C,cAAChB,EAAA,EAAD,UAExB,cAACA,EAAA,EAAKiB,IAAN,UACA,eAACC,EAAA,EAAD,CAAOC,QAAM,EAAb,UACxB,cAACD,EAAA,EAAME,OAAP,UACE,eAACF,EAAA,EAAMD,IAAP,WACE,cAACC,EAAA,EAAMG,WAAP,qBACA,cAACH,EAAA,EAAMG,WAAP,qBACA,cAACH,EAAA,EAAMG,WAAP,0BAIJ,eAACH,EAAA,EAAMI,KAAP,WACE,eAACJ,EAAA,EAAMD,IAAP,WACE,cAACC,EAAA,EAAMK,KAAP,UACE,cAACC,EAAA,EAAD,CAAOC,QAAM,EAAb,qBAEF,cAACP,EAAA,EAAMK,KAAP,mBACA,cAACL,EAAA,EAAMK,KAAP,sBAEF,eAACL,EAAA,EAAMD,IAAP,WACE,cAACC,EAAA,EAAMK,KAAP,mBACA,cAACL,EAAA,EAAMK,KAAP,mBACA,cAACL,EAAA,EAAMK,KAAP,sBAEF,eAACL,EAAA,EAAMD,IAAP,WACE,cAACC,EAAA,EAAMK,KAAP,mBACA,cAACL,EAAA,EAAMK,KAAP,mBACA,cAACL,EAAA,EAAMK,KAAP,qCAaW,cAACG,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,aC1JzC,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,K","file":"static/js/main.a7a010cc.chunk.js","sourcesContent":["import { Container, Grid,Table, Header,Label, Menu,  Loader, Icon} from 'semantic-ui-react'\nimport React, { useEffect, useState } from \"react\";\nimport { scaleQuantile } from \"d3-scale\";\nimport _ from \"lodash\";\nimport {\n  VictoryChart,\n  VictoryBoxPlot,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from \"victory\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\n\n// import allStates from \"./data/allstates.json\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/JZCS2018/ga_county_zipcode_map/master/county_topo/region_us.json\";\n\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\"\n];\n\nexport default function VaccineMap(props) {\n  const [colorScale, setColorScale] = useState();\n  const [data, setData] = useState();\n  const [regions, setRegions] = useState('');\n  const countyColor = \"#f2a900\";\n\n  const metric = \"Delta_B.1.617.2\";\n\n  useEffect(() => {\n    fetch(\"/data/static.json\")\n      .then(res => res.json())\n      .then(x => {\n        setData(x);\n        const cs = scaleQuantile()\n          .domain(\n            _.map(\n              _.filter(\n                _.map(x, (d, k) => {\n                  d.regionCode = k;\n                  return d;\n                }),\n                (d) => d[metric] > 0 && d.regionCode.length > 0\n              ),\n              (d) => d[metric]\n            )\n          )\n          .range(colorPalette);\n\n        let scaleMap = {};\n        _.each(x, (d) => {\n          if (d[metric] >= 0) {\n            scaleMap[d[\"regionCode\"]] = cs(d[metric]);\n          }\n        });\n\n        setColorScale(scaleMap);\n        // console.log(scaleMap);\n      });\n  }, []);\n  if (data) {\n    return (\n      <div>\n      <Container style={{marginTop: '8em', minWidth: '1260px'}}>\n      <Grid>     \n      <Grid.Column> \n      <ComposableMap  projection=\"geoAlbersUsa\">\n        <Geographies data-tip = 'map' data-for='map' geography={geoUrl}>\n          {({ geographies }) => (geographies.map(geo =>\n            <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                style={{\n                  default: {\n                      stroke: \"#607D8B\",\n                      strokeWidth: 0.95,\n                      outline: \"none\",\n                  },\n                  pressed: {\n                      outline: \"none\",}\n              }}\n              onMouseEnter={() => {\n                setRegions(geo.properties.regionCode);\n                // console.log(colorScale[\"1\"]);\n                // console.log(regions);\n                // console.log(geo.properties.regionCode)\n              }}\n                    fill={\n                    (regions === geo.properties.regionCode)\n                      ? countyColor\n                      : colorScale[geo.properties.regionCode]\n                        \n                      }\n                />     \n            \n          ))}\n        </Geographies>\n      </ComposableMap>\n      </Grid.Column>\n      </Grid>\n      </Container>\n      <ReactTooltip id='map'backgroundColor='white'><Grid>\n                            \n                            <Grid.Row>\n                            <Table celled>\n    <Table.Header>\n      <Table.Row>\n        <Table.HeaderCell>Header</Table.HeaderCell>\n        <Table.HeaderCell>Header</Table.HeaderCell>\n        <Table.HeaderCell>Header</Table.HeaderCell>\n      </Table.Row>\n    </Table.Header>\n\n    <Table.Body>\n      <Table.Row>\n        <Table.Cell>\n          <Label ribbon>First</Label>\n        </Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Cell</Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n      </Table.Row>\n      <Table.Row>\n        <Table.Cell>Cell</Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n        <Table.Cell>Cell</Table.Cell>\n      </Table.Row>\n    </Table.Body>\n  </Table>\n  </Grid.Row>      \n  </Grid>   \n                            \n                            </ReactTooltip>\n                            </div>\n    );\n    \n  }\n  else {\n            return <Loader active inline='centered' />\n        }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}